//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Fantacode Studios/Grappling Hook System/Game/Input Manager/GrapplingInputAction'.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GrapplingInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GrapplingInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GrapplingInputAction'"",
    ""maps"": [
        {
            ""name"": ""Grappling"",
            ""id"": ""12f04c24-1717-4b0c-9103-16669f2c0bae"",
            ""actions"": [
                {
                    ""name"": ""GrapplingHook"",
                    ""type"": ""Button"",
                    ""id"": ""febb4835-9593-4f26-b277-d6c9e0d3fb60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""73c9b8a8-c24b-4889-ab03-a538c8d2eeed"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GrapplingHook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0137bf20-8365-407a-bdb7-ab3f98f2bce0"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GrapplingHook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Grappling
        m_Grappling = asset.FindActionMap("Grappling", throwIfNotFound: true);
        m_Grappling_GrapplingHook = m_Grappling.FindAction("GrapplingHook", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Grappling
    private readonly InputActionMap m_Grappling;
    private List<IGrapplingActions> m_GrapplingActionsCallbackInterfaces = new List<IGrapplingActions>();
    private readonly InputAction m_Grappling_GrapplingHook;
    public struct GrapplingActions
    {
        private @GrapplingInputAction m_Wrapper;
        public GrapplingActions(@GrapplingInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @GrapplingHook => m_Wrapper.m_Grappling_GrapplingHook;
        public InputActionMap Get() { return m_Wrapper.m_Grappling; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GrapplingActions set) { return set.Get(); }
        public void AddCallbacks(IGrapplingActions instance)
        {
            if (instance == null || m_Wrapper.m_GrapplingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GrapplingActionsCallbackInterfaces.Add(instance);
            @GrapplingHook.started += instance.OnGrapplingHook;
            @GrapplingHook.performed += instance.OnGrapplingHook;
            @GrapplingHook.canceled += instance.OnGrapplingHook;
        }

        private void UnregisterCallbacks(IGrapplingActions instance)
        {
            @GrapplingHook.started -= instance.OnGrapplingHook;
            @GrapplingHook.performed -= instance.OnGrapplingHook;
            @GrapplingHook.canceled -= instance.OnGrapplingHook;
        }

        public void RemoveCallbacks(IGrapplingActions instance)
        {
            if (m_Wrapper.m_GrapplingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGrapplingActions instance)
        {
            foreach (var item in m_Wrapper.m_GrapplingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GrapplingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GrapplingActions @Grappling => new GrapplingActions(this);
    public interface IGrapplingActions
    {
        void OnGrapplingHook(InputAction.CallbackContext context);
    }
}
